// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: detail.proto

package task_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailServiceClient is the client API for DetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailServiceClient interface {
	CreateDetail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*Detail, error)
	UpdateDetail(ctx context.Context, in *Detail, opts ...grpc.CallOption) (*Detail, error)
	DeleteDetail(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDetail(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Detail, error)
	GetAllDetail(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*DetailResponse, error)
}

type detailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailServiceClient(cc grpc.ClientConnInterface) DetailServiceClient {
	return &detailServiceClient{cc}
}

func (c *detailServiceClient) CreateDetail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/task_service.DetailService/CreateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailServiceClient) UpdateDetail(ctx context.Context, in *Detail, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/task_service.DetailService/UpdateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailServiceClient) DeleteDetail(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/task_service.DetailService/DeleteDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailServiceClient) GetDetail(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/task_service.DetailService/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailServiceClient) GetAllDetail(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	out := new(DetailResponse)
	err := c.cc.Invoke(ctx, "/task_service.DetailService/GetAllDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailServiceServer is the server API for DetailService service.
// All implementations must embed UnimplementedDetailServiceServer
// for forward compatibility
type DetailServiceServer interface {
	CreateDetail(context.Context, *DetailRequest) (*Detail, error)
	UpdateDetail(context.Context, *Detail) (*Detail, error)
	DeleteDetail(context.Context, *PrimaryKey) (*empty.Empty, error)
	GetDetail(context.Context, *PrimaryKey) (*Detail, error)
	GetAllDetail(context.Context, *GetListRequest) (*DetailResponse, error)
	mustEmbedUnimplementedDetailServiceServer()
}

// UnimplementedDetailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetailServiceServer struct {
}

func (UnimplementedDetailServiceServer) CreateDetail(context.Context, *DetailRequest) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetail not implemented")
}
func (UnimplementedDetailServiceServer) UpdateDetail(context.Context, *Detail) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetail not implemented")
}
func (UnimplementedDetailServiceServer) DeleteDetail(context.Context, *PrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetail not implemented")
}
func (UnimplementedDetailServiceServer) GetDetail(context.Context, *PrimaryKey) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedDetailServiceServer) GetAllDetail(context.Context, *GetListRequest) (*DetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDetail not implemented")
}
func (UnimplementedDetailServiceServer) mustEmbedUnimplementedDetailServiceServer() {}

// UnsafeDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailServiceServer will
// result in compilation errors.
type UnsafeDetailServiceServer interface {
	mustEmbedUnimplementedDetailServiceServer()
}

func RegisterDetailServiceServer(s grpc.ServiceRegistrar, srv DetailServiceServer) {
	s.RegisterService(&DetailService_ServiceDesc, srv)
}

func _DetailService_CreateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).CreateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_service.DetailService/CreateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).CreateDetail(ctx, req.(*DetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailService_UpdateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Detail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).UpdateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_service.DetailService/UpdateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).UpdateDetail(ctx, req.(*Detail))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailService_DeleteDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).DeleteDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_service.DetailService/DeleteDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).DeleteDetail(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_service.DetailService/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).GetDetail(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailService_GetAllDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).GetAllDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_service.DetailService/GetAllDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).GetAllDetail(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetailService_ServiceDesc is the grpc.ServiceDesc for DetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task_service.DetailService",
	HandlerType: (*DetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDetail",
			Handler:    _DetailService_CreateDetail_Handler,
		},
		{
			MethodName: "UpdateDetail",
			Handler:    _DetailService_UpdateDetail_Handler,
		},
		{
			MethodName: "DeleteDetail",
			Handler:    _DetailService_DeleteDetail_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _DetailService_GetDetail_Handler,
		},
		{
			MethodName: "GetAllDetail",
			Handler:    _DetailService_GetAllDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detail.proto",
}
